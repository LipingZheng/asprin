#!/usr/bin/python

#
# imports
#

import re
import argparse
from collections import Counter
from src.spec_parser import spec_parser
from src.pp_parser   import   pp_parser
from src.solver      import      solver


#
# asprin error
#

ERROR = "error: asprin: "


#
# global variables and functions
#

version = "3.0.0"

# TODO: reorganize
def warning(string):
    print "asprin: warning: " + string


#
# class AsprinArgumentParser
#
class AsprinArgumentParser:

    clingo_help = """
Clingo Options:
  --<option>[=<value>]\t: Set clingo <option> [to <value>] 

    """

    usage = "asprin [number] [options] [files]" 

    epilog = """
Default command-line:
asprin --models 1
    
asprin is part of Potassco: https://potassco.org/labs
Get help/report bugs via : https://potassco.org/support
    """
    
    def __init__(self):
        self.underscores = 0

    def __update_underscores(self,constant):
        old, sep, new = constant.partition("=")
        i = 0
        while len(new)>i and new[i]=="_": i+=1
        if i>self.underscores: self.underscores = i
    
    def run(self):
    
        # version
        _version = "asprin version " + version
        print _version
        
        # command parser
        _epilog = self.clingo_help + "\n\nusage: " + self.usage + self.epilog
        cmd_parser = argparse.ArgumentParser(
            usage=self.usage,epilog=_epilog,formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=False)
        basic = cmd_parser.add_argument_group('Basic Options')
        basic.add_argument('-h','--help',action='help',help=': Print help and exit')
        basic.add_argument('-',dest='read_stdin',action='store_true',help=argparse.SUPPRESS)   
        basic.add_argument(
            '--models','-n',help=": Compute at most <n> models (0 for all)",
            type=int,dest='max_models',metavar='<n>',default=1)
        basic.add_argument(
            '--steps','-s',help=": Execute at most <s> steps",
            type=int,dest='steps',metavar='<s>',default=0)
        basic.add_argument('-c','--const',dest='constants',action="append",help=argparse.SUPPRESS,default=[])   
        basic.add_argument('--debug',dest='debug',help=argparse.SUPPRESS,action='store_true')   
        basic.add_argument('--no-asprin-lib',dest='asprin-lib',help=': Do not include asprin.lib',action='store_false')   
        options, unknown = cmd_parser.parse_known_args()
        options = vars(options)

        # separate files, number of models and clingo options
        options['files'], clingo_options = [], []
        for i in unknown:
            if   (re.match(r'^([0-9]|[1-9][0-9]+)$',i)): options['max_models'] = int(i)
            elif (re.match(r'^-',i)):                    clingo_options.append(i)
            else:                                        options['files'].append(i)
        if options['files'] == []: options['read_stdin'] = True
        
        # warn about repeated files
        for i in [ file for file,v in Counter(options['files']).iteritems() if v > 1]: 
            warning('file {} included more than once'.format(i))
      
 
        # handle constants
        constants = dict()
        for i in options['constants']:
            self.__update_underscores(i)
            old, sep, new = i.partition("=") 
            if old in constants: 
                raise Exception("constant defined twice")
            else: 
                constants[old] = new
        options['constants'] = constants
    
        # provisional (avoid warnings)
        clingo_options.append("-Wnone")

        # return
        return options, clingo_options, self.underscores


#
# class Asprin
#
class Asprin:


    def __update_constants(self,options,constants):
        for i in constants: 
            if i[0] not in options['constants']: 
                options['constants'][i[0]] = i[1]


    def run(self):
        # arguments parsing
        options, clingo_options, underscores = AsprinArgumentParser().run()
        print "Reading from " + ("-" if options['read_stdin'] else options['files'][0]) + " ..."
        # specification parsing
        self.spec_parser = spec_parser.Parser(underscores)
        programs, underscores, constants = self.spec_parser.parse_files(options['files'],options['read_stdin'],options['asprin-lib'])
        self.__update_constants(options,constants)
        # preference programs parsing
        self.pp_parser   = pp_parser.Parser(underscores)
        control          = self.pp_parser.parse(programs,options,clingo_options)
        # solving
        _solver          = solver.Solver(control,underscores)
        _solver.set_options(options)
        _solver.run()


if __name__ == "__main__":
    try:
        asprin = Asprin().run()
    except Exception as e: 
        print ERROR + str(e)

