#!/usr/bin/python

#
# IMPORTS
#

import re
import argparse
import sys
import clingo
from src.spec_parser import spec_parser
from src.pp_parser   import   pp_parser
from src.solver      import      solver


#
# DEFINES
#

ERROR   = "*** ERROR: (asprin): {}"
UNKNOWN = "UNKNOWN"
VERSION = "3.0.0"



#
# GLOBAL VARIABLES AND FUNCTIONS
#

class MyArgumentParser(argparse.ArgumentParser):

    def error(self, message):
        raise argparse.ArgumentError(None,"SyntaxError: " + message)


#
# class AsprinArgumentParser
#
class AsprinArgumentParser:


    clingo_help = """
Clingo Options:
  --<option>[=<value>]\t: Set clingo <option> [to <value>] 

    """


    usage = "asprin [number] [options] [files]" 


    epilog = """
Default command-line:
asprin --models 1
    
asprin is part of Potassco: https://potassco.org/labs
Get help/report bugs via : https://potassco.org/support
    """

    
    def __init__(self):
        self.underscores = 0


    def __update_underscores(self,new):
        i = 0
        while len(new)>i and new[i]=="_": i+=1
        if i>self.underscores: self.underscores = i


    def __add_file(self,files,file):
        if file in files:
            print >> sys.stderr, "<cmd>: warning: already included file:\n  {}\n".format(file)  
        else:
            files.append(file)
    

    def run(self):
    
        # command parser
        _epilog = self.clingo_help + "\nusage: " + self.usage + self.epilog
        cmd_parser = MyArgumentParser(
            usage=self.usage,epilog=_epilog,formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=False)
        basic = cmd_parser.add_argument_group('Basic Options')
        basic.add_argument('-h','--help',action='help',help=': Print help and exit')
        #basic.add_argument('-',dest='read_stdin',action='store_true',help=argparse.SUPPRESS)   
        basic.add_argument(
            '--models','-n',help=": Compute at most <n> models (0 for all)",
            type=int,dest='max_models',metavar='<n>',default=1)
        basic.add_argument(
            '--steps','-s',help=": Execute at most <s> steps",
            type=int,dest='steps',metavar='<s>',default=0)
        basic.add_argument('-c','--const',dest='constants',action="append",help=argparse.SUPPRESS,default=[])   
        basic.add_argument('--debug',dest='debug',help=argparse.SUPPRESS,action='store_true')   
        basic.add_argument('--project',dest='project',help=': Enable projective solution enumeration',action='store_true')   
        basic.add_argument('--no-asprin-lib',dest='asprin-lib',help=': Do not include asprin.lib',action='store_false')   
        options, unknown = cmd_parser.parse_known_args()
        options = vars(options)

        # separate files, number of models and clingo options
        options['files'], clingo_options = [], []
        for i in unknown:
            if i=="-":                                   self.__add_file(options['files'],i)
            elif (re.match(r'^([0-9]|[1-9][0-9]+)$',i)): options['max_models'] = int(i)
            elif (re.match(r'^-',i)):                    clingo_options.append(i)
            else:                                        self.__add_file(options['files'],i)
        
        # when no files, add stdin
        # build prologue
        if options['files'] == []: 
            first_file = "stdin"
            options['files'].append("-")
        else:
            first_file = options['files'][0]
            if len(options['files'])>1: first_file += " ..."
        prologue = "asprin version " + VERSION + "\nReading from " + first_file
        
        # handle constants
        constants = dict()
        for i in options['constants']:
            old, sep, new = i.partition("=") 
            self.__update_underscores(new)
            if old in constants: 
                raise Exception("constant defined twice")
            else: 
                constants[old] = new
        options['constants'] = constants
    
        # return
        return options, clingo_options, self.underscores, prologue



#
# class Asprin
#
class Asprin:


    def __update_constants(self,options,constants):
        for i in constants: 
            if i[0] not in options['constants']: 
                options['constants'][i[0]] = i[1]


    def __get_control(self,clingo_options):
        try:
            return clingo.Control(clingo_options)
        except Exception as e:
            raise argparse.ArgumentError(None,e.message)

    def run(self):

        # arguments parsing
        options, clingo_options, underscores, prologue = AsprinArgumentParser().run()
        
        # create Control object
        control = self.__get_control(clingo_options)
        
        # print prologue
        print prologue

        # specification parsing
        self.spec_parser = spec_parser.Parser(underscores)
        programs, underscores, base_constants, options['show'] = self.spec_parser.parse_files(options)
        self.__update_constants(options,base_constants)

        # preference programs parsing
        pp_parser.Parser(underscores).parse(control,programs,options,clingo_options)

        # solving
        _solver = solver.Solver(control,underscores)
        _solver.set_options(options)
        _solver.run()


if __name__ == "__main__":
    #Asprin().run()
    try:
        Asprin().run()
    except argparse.ArgumentError as e: 
        print >> sys.stderr, ERROR.format(str(e))
        print >> sys.stderr, "*** Info : (asprin): Try '--help' for usage information" 
        sys.exit(1) 
    except Exception as e: 
        print >> sys.stderr, ERROR.format(str(e))
        print >> sys.stdout, UNKNOWN
        sys.exit(65) 

