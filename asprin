#!/usr/bin/python

#
# imports
#

#import sys
#import os
#import logging
#logging.basicConfig(level=logging.DEBUG)
import re
import argparse
from src.spec_parser import spec_parser
from src.pp_parser   import   pp_parser
from src.solver      import      solver


#
# global variables
#

version = "3.0.0"


#
# class AsprinArgumentParser
#
class AsprinArgumentParser:

    clingo_help = """
Clingo Options:
  --<option>[=<value>]\t: Set clingo <option> to <value> 
    """
    usage = "asprin [number] [options] [files]" 
    epilog = """
Default command-line:
asprin --models 1
    
asprin is part of Potassco: https://potassco.org/labs
Get help/report bugs via : https://potassco.org/support
    """
    
    def run(self):
    
        # version
        _version = "asprin version " + version
        print _version
        
        # command parser
        _epilog = self.clingo_help + "\n\nusage: " + self.usage + self.epilog
        cmd_parser = argparse.ArgumentParser(
            usage=self.usage,epilog=_epilog,formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=False)
        basic = cmd_parser.add_argument_group('Basic Options')
        basic.add_argument('-h','--help',action='help',help=': Print help and exit')
        basic.add_argument('-',dest='read_stdin',action='store_true',help=argparse.SUPPRESS)   
        basic.add_argument(
            '--models','-n',help=": Compute at most <n> models (0 for all)",
            type=int,dest='max_models',metavar='<n>',default=1)
        basic.add_argument('-c','--const',dest='constants',action="append",help=argparse.SUPPRESS,default=[])   
        options, unknown = cmd_parser.parse_known_args()
        options = vars(options)

        # separate files, number of models and clingo options
        options['files'], clingo_options = [], []
        for i in unknown:
            if   (re.match(r'^([0-9]|[1-9][0-9]+)$',i)): options['max_models'] = int(i)
            elif (re.match(r'^-',i)):                    clingo_options.append(i)
            else:                                        options['files'].append(i)
        if options['files'] == []: options['read_stdin'] = True
        print "Reading from " + ("-" if options['read_stdin'] else options['files'][0]) + " ..."
       
        # copy constants to clingo_options
        map(lambda i: clingo_options.append("-c "+i),options['constants'])

        # provisional (avoid warnings)
        clingo_options.append("-Wnone")

        # return
        return options, clingo_options


#
# class Asprin
#
class Asprin:

    def run(self):
        # arguments parsing
        options, clingo_options = AsprinArgumentParser().run()
        # specification parsing
        self.spec_parser = spec_parser.Parser()
        program          = self.spec_parser.parse_files(options['files'],options['read_stdin'])
        underscores      = self.spec_parser.get_underscores()
        # preference programs parsing
        self.pp_parser   = pp_parser.Parser(underscores)
        control          = self.pp_parser.parse(program,clingo_options)
        # solving
        _solver          = solver.Solver(control)
        _solver.set_options(options)
        _solver.run()


if __name__ == "__main__":
    asprin = Asprin().run()


# TODO: underscores
# TODO: preference type names underscored

